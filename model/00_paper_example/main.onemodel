model ProteinConstitutive
  species m=0, p=0
  parameter k_m=1, d_m=1, k_p=1, d_p=1
  reaction
    0 -> m     ; k_m
    m -> 0     ; d_m*m
    m -> m + p ; k_p*m
    p -> 0     ; d_p*p
  end
end
standalone
  A = ProteinConstitutive()
end



import "protein_constitutive.one"
model ProteinInduced(ProteinConstitutive)
  input TF
  parameter h=1, k_m_max=1
  species k_m=0
  rule
    k_m := k_m_max*TF/h
  end
end
standalone
  A = ProteinConstitutive()
  B = ProteinInduced()
  rule
    B.TF := A.p
  end
end

###

import "protein_constitutive.one"
import "protein_induced.one"
model AntitheticController
  z1 = ProteinConstitutive()
  z2 = ProteinInduced()
  x  = ProteinInduced()
  parameter gamma=1
  reaction
    z1.p + z2.p -> 0 ; gamma*z1.p*z2.p
  end
  rule
    x.TF  := z1.p
    z2.TF := x.p
  end
end
standalone
	ac = AntitheticController()
end

####

model WildType
  input WSum
  ...
end
model WildType_ProteinConstitutive
  input nu_t, mu, ...
  species W
  ...
end

import "wild_type.one"
model WildType_AntitheticController
  z1 = WildType_ProteinConstitutive()
  ...
end
standalone
  cell = WildType()
  ac   = WildType_AntitheticController()
  rule
    cell.WSum  := ac.z1.W + ac.z2.W + ac.x.W
    ac.z1.nu_t := cell.nu_t
    ac.z1.mu   := cell.mu
    ...
  end
end

import dependencies
model ModelName(ParentModelName)
  define inputs
  define species
  define parameters
  define reactions
  define rules
end
standalone
  example script on how to use the model
end
