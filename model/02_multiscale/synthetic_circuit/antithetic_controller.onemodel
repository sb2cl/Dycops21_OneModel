import '../protein/base_protein.onemodel'
import '../protein/induced_protein.onemodel'
import '../metabolic/wild_type.onemodel'

model AntitheticController(WildType)
  # Create protein A.
  z1  = BaseProtein()
  z2  = InducedProtein()
  z12 = BaseProtein()
  x   = InducedProtein()

  # Add protein z1 to the model.
  rule
    z1.nu := nu
    z1.mu := mu
    z1.r := r
    z1.m_h := m_h
    z1.J_host_sum := J_host_sum
  end

  # Add protein z2 to the model.
  rule
    z2.nu := nu
    z2.mu := mu
    z2.r := r
    z2.m_h := m_h
    z2.J_host_sum := J_host_sum
  end

  # Add protein z12 to the model.
  rule
    z12.nu := nu
    z12.mu := mu
    z12.r := r
    z12.m_h := m_h
    z12.J_host_sum := J_host_sum
  end

  # Add protein x to the model.
  rule
    x.nu := nu
    x.mu := mu
    x.r := r
    x.m_h := m_h
    x.J_host_sum := J_host_sum
    x.TF := z1.m
  end

  parameter
    gamma = 100
    z1.omega = 1000
    z2.omega_max = 1000
    # z12 is just produced by the antithetic reaction.
    z12.omega = 0
  end

  rule
               x.TF := z1.m
              z2.TF := x.m
    z1.m_eq:   z1.m '= (m_h*z1.N*z1.J/J_host_sum - z1.m)*mu - gamma*z1.m*z2.m
    z2.m_eq:   z2.m '= (m_h*z2.N*z2.J/J_host_sum - z2.m)*mu - gamma*z1.m*z2.m
    z12.m_eq: z12.m '= (m_h*z12.N*z12.J/J_host_sum - z12.m)*mu + gamma*z1.m*z2.m
  end

  # Override equations.
  rule
    m_p_eq:  m_p := p_r.m + p_nr.m + z1.m + z2.m + z12.m + x.m
    J_sum_eq: J_sum := p_r.N*p_r.J + p_nr.N*p_nr.J + z1.N*z1.J + z2.N*z2.J + z12.N*z12.J + x.N*x.J
    J_sum_E_eq: J_sum_E := p_r.N*(1+1/p_r.E_m)*p_r.J + p_nr.N*(1+1/p_nr.E_m)*p_nr.J + z1.N*(1+1/z1.E_m)*z1.J + z2.N*(1+1/z2.E_m)*z2.J + z12.N*(1+1/z12.E_m)*z12.J + x.N*(1+1/x.E_m)*x.J
  end

  species
    ref = 0
  end

  rule
    ref := z1.omega / z2.omega_max *z2.h
  end

end

standalone
  parameter __t_end = 2000

  cell = AntitheticController()

  parameter
    s = 3.6
    m_h = 450
  end

  rule
    cell.s := s
    cell.m_h := m_h
  end
end
