classdef proteinNonRibosomal
	% This file was automatically generated by OneModel.
	% Any changes you make to it will be overwritten the next time
	% the file is generated.

	properties
		p      % Default model parameters.
		x0     % Default initial conditions.
		M      % Mass matrix for DAE systems.
		opts   % Simulation options.
	end

	methods
		function obj = proteinNonRibosomal()
			%% Constructor of proteinNonRibosomal.
			obj.p    = obj.default_parameters();
			obj.x0   = obj.initial_conditions();
			obj.M    = obj.mass_matrix();
			obj.opts = obj.simulation_options();
		end

		function p = default_parameters(~)
			%% Default parameters value.
			p = [];
			p.p_nr__N = 1735.0;
			p.p_nr__omega = 0.0361;
			p.p_nr__d_m = 0.2;
			p.p_nr__k_b = 12.4404;
			p.p_nr__k_u = 10.0454;
			p.p_nr__l_p = 333.0;
			p.p_nr__l_e = 25.0;
		end

		function x0 = initial_conditions(~)
			%% Default initial conditions.
			x0 = [
				100.0 % p_nr__m
			];
		end

		function M = mass_matrix(~)
			%% Mass matrix for DAE systems.
			M = [
				1 
			];
		end

		function opts = simulation_options(~)
			%% Default simulation options.
			opts.t_end = 10.0;
			opts.t_init = 0.0;
		end

		function dx = ode(~,t,x,p)
			%% Evaluate the ODE.
			%
			% Args:
			%	 t Current time in the simulation.
			%	 x Array with the state value.
			%	 p Struct with the parameters.
			%
			% Return:
			%	 dx Array with the ODE.

			% ODE and algebraic states:
			p_nr__m = x(1,:);

			% Assigment states:
			p_nr__nu = 1;
			p_nr__mu = 1;
			p_nr__r = 1;
			p_nr__m_h = 1;
			p_nr__J_host_sum = 1;
			p_nr__K_C0 = p.p_nr__k_b./(p.p_nr__k_u + p_nr__nu./p.p_nr__l_e);
			p_nr__E_m = 6.3492;
			p_nr__J = p_nr__E_m.*p.p_nr__omega./(p.p_nr__d_m./p_nr__K_C0 + p_nr__mu.*p_nr__r);

			% der(p_nr__m)
			dx(1,1) = (p_nr__m_h.*p.p_nr__N.*p_nr__J./p_nr__J_host_sum - p_nr__m).*p_nr__mu;

		end
		function out = simout2struct(~,t,x,p)
			%% Convert the simulation output into an easy-to-use struct.

			% We need to transpose state matrix.
			x = x';
			% ODE and algebraic states:
			p_nr__m = x(1,:);

			% Assigment states:
			p_nr__nu = 1;
			p_nr__mu = 1;
			p_nr__r = 1;
			p_nr__m_h = 1;
			p_nr__J_host_sum = 1;
			p_nr__K_C0 = p.p_nr__k_b./(p.p_nr__k_u + p_nr__nu./p.p_nr__l_e);
			p_nr__E_m = 6.3492;
			p_nr__J = p_nr__E_m.*p.p_nr__omega./(p.p_nr__d_m./p_nr__K_C0 + p_nr__mu.*p_nr__r);

			% Save simulation time.
			out.t = t;

			% Vector for extending single-value states and parameters.
			ones_t = ones(size(t'));


			% Save states.
			out.p_nr__nu = p_nr__nu.*ones_t;
			out.p_nr__mu = p_nr__mu.*ones_t;
			out.p_nr__r = p_nr__r.*ones_t;
			out.p_nr__m_h = p_nr__m_h.*ones_t;
			out.p_nr__J_host_sum = p_nr__J_host_sum.*ones_t;
			out.p_nr__K_C0 = p_nr__K_C0.*ones_t;
			out.p_nr__E_m = p_nr__E_m.*ones_t;
			out.p_nr__J = p_nr__J.*ones_t;
			out.p_nr__m = p_nr__m.*ones_t;

			% Save parameters.
			out.p_nr__N = p.p_nr__N.*ones_t;
			out.p_nr__omega = p.p_nr__omega.*ones_t;
			out.p_nr__d_m = p.p_nr__d_m.*ones_t;
			out.p_nr__k_b = p.p_nr__k_b.*ones_t;
			out.p_nr__k_u = p.p_nr__k_u.*ones_t;
			out.p_nr__l_p = p.p_nr__l_p.*ones_t;
			out.p_nr__l_e = p.p_nr__l_e.*ones_t;

		end
		function plot(~,out)
			%% Plot simulation result.
			subplot(3,3,1);
			plot(out.t, out.p_nr__nu);
			title("p_nr__nu");
			ylim([0, +inf]);
			grid on;

			subplot(3,3,2);
			plot(out.t, out.p_nr__mu);
			title("p_nr__mu");
			ylim([0, +inf]);
			grid on;

			subplot(3,3,3);
			plot(out.t, out.p_nr__r);
			title("p_nr__r");
			ylim([0, +inf]);
			grid on;

			subplot(3,3,4);
			plot(out.t, out.p_nr__m_h);
			title("p_nr__m_h");
			ylim([0, +inf]);
			grid on;

			subplot(3,3,5);
			plot(out.t, out.p_nr__J_host_sum);
			title("p_nr__J_host_sum");
			ylim([0, +inf]);
			grid on;

			subplot(3,3,6);
			plot(out.t, out.p_nr__K_C0);
			title("p_nr__K_C0");
			ylim([0, +inf]);
			grid on;

			subplot(3,3,7);
			plot(out.t, out.p_nr__E_m);
			title("p_nr__E_m");
			ylim([0, +inf]);
			grid on;

			subplot(3,3,8);
			plot(out.t, out.p_nr__J);
			title("p_nr__J");
			ylim([0, +inf]);
			grid on;

			subplot(3,3,9);
			plot(out.t, out.p_nr__m);
			title("p_nr__m");
			ylim([0, +inf]);
			grid on;

		end
	end
end
