classdef wild_type
	% This file was automatically generated by OneModel.
	% Any changes you make to it will be overwritten the next time
	% the file is generated.

	properties
		p      % Default model parameters.
		x0     % Default initial conditions.
		M      % Mass matrix for DAE systems.
		opts   % Simulation options.
	end

	methods
		function obj = wild_type()
			%% Constructor of wild_type.
			obj.p    = obj.default_parameters();
			obj.x0   = obj.initial_conditions();
			obj.M    = obj.mass_matrix();
			obj.opts = obj.simulation_options();
		end

		function p = default_parameters(~)
			%% Default parameters value.
			p = [];
			p.wt__p_r__N = 55.0;
			p.wt__p_r__omega = 7.33;
			p.wt__p_r__d_m = 0.16;
			p.wt__p_r__k_b = 4.7627;
			p.wt__p_r__k_u = 119.7956;
			p.wt__p_r__l_p = 195.0;
			p.wt__p_r__l_e = 25.0;
			p.wt__p_r__weigth = 0.0045;
			p.wt__p_nr__N = 1735.0;
			p.wt__p_nr__omega = 0.0361;
			p.wt__p_nr__d_m = 0.2;
			p.wt__p_nr__k_b = 12.4404;
			p.wt__p_nr__k_u = 10.0454;
			p.wt__p_nr__l_p = 333.0;
			p.wt__p_nr__l_e = 25.0;
			p.wt__K_s = 0.1802;
			p.wt__nu_max = 1260.0;
			p.wt__m_aa = 1.826e-07;
			p.wt__phi_t = 0.9473;
			p.s = 3.6;
			p.m_h = 450.0;
		end

		function x0 = initial_conditions(~)
			%% Default initial conditions.
			x0 = [
				100.0 % wt__p_r__m
				100.0 % wt__p_nr__m
				0.01 % wt__mu (algebraic)
				350.0 % wt__r (algebraic)
			];
		end

		function M = mass_matrix(~)
			%% Mass matrix for DAE systems.
			M = [
				1 0 0 0 
				0 1 0 0 
				0 0 0 0 
				0 0 0 0 
			];
		end

		function opts = simulation_options(~)
			%% Default simulation options.
			opts.t_end = 10.0;
			opts.t_init = 0.0;
		end

		function dx = ode(~,t,x,p)
			%% Evaluate the ODE.
			%
			% Args:
			%	 t Current time in the simulation.
			%	 x Array with the state value.
			%	 p Struct with the parameters.
			%
			% Return:
			%	 dx Array with the ODE.

			% ODE and algebraic states:
			wt__p_r__m = x(1,:);
			wt__p_nr__m = x(2,:);
			wt__mu = x(3,:);
			wt__r = x(4,:);

			% Assigment states:
			wt__s = p.s;
			wt__m_h = p.m_h;
			wt__p_r__mu = wt__mu;
			wt__p_r__r = wt__r;
			wt__p_r__m_h = wt__m_h;
			wt__p_r__E_m = 3.459;
			wt__p_r__r_t = wt__p_r__m./p.wt__p_r__weigth;
			wt__p_nr__mu = wt__mu;
			wt__p_nr__r = wt__r;
			wt__p_nr__m_h = wt__m_h;
			wt__p_nr__E_m = 6.3492;
			wt__nu = p.wt__nu_max.*wt__s./(wt__s + p.wt__K_s);
			wt__m_p = wt__p_r__m + wt__p_nr__m;
			wt__p_r__nu = wt__nu;
			wt__p_r__K_C0 = p.wt__p_r__k_b./(p.wt__p_r__k_u + wt__p_r__nu./p.wt__p_r__l_e);
			wt__p_r__J = wt__p_r__E_m.*p.wt__p_r__omega./(p.wt__p_r__d_m./wt__p_r__K_C0 + wt__p_r__mu.*wt__p_r__r);
			wt__p_nr__nu = wt__nu;
			wt__p_nr__K_C0 = p.wt__p_nr__k_b./(p.wt__p_nr__k_u + wt__p_nr__nu./p.wt__p_nr__l_e);
			wt__p_nr__J = wt__p_nr__E_m.*p.wt__p_nr__omega./(p.wt__p_nr__d_m./wt__p_nr__K_C0 + wt__p_nr__mu.*wt__p_nr__r);
			wt__J_sum = p.wt__p_r__N.*wt__p_r__J + p.wt__p_nr__N.*wt__p_nr__J;
			wt__J_host_sum = p.wt__p_r__N.*wt__p_r__J + p.wt__p_nr__N.*wt__p_nr__J;
			wt__J_sum_E = p.wt__p_r__N.*(1 + 1./wt__p_r__E_m).*wt__p_r__J + p.wt__p_nr__N.*(1 + 1./wt__p_nr__E_m).*wt__p_nr__J;
			wt__phi_b_t = wt__J_host_sum./(1 + wt__J_sum_E);
			wt__p_r__J_host_sum = wt__J_host_sum;
			wt__p_nr__J_host_sum = wt__J_host_sum;

			% der(wt__p_r__m)
			dx(1,1) = (wt__p_r__m_h.*p.wt__p_r__N.*wt__p_r__J./wt__p_r__J_host_sum - wt__p_r__m).*wt__p_r__mu;

			% der(wt__p_nr__m)
			dx(2,1) = (wt__p_nr__m_h.*p.wt__p_nr__N.*wt__p_nr__J./wt__p_nr__J_host_sum - wt__p_nr__m).*wt__p_nr__mu;

			% der(wt__mu)
			dx(3,1) = wt__mu - (p.wt__m_aa./wt__m_h).*wt__nu.*wt__phi_b_t.*p.wt__phi_t.*wt__p_r__r_t;

			% der(wt__r)
			dx(4,1) = wt__r - p.wt__phi_t.*wt__p_r__r_t./(1 + wt__J_sum_E);

		end
		function out = simout2struct(~,t,x,p)
			%% Convert the simulation output into an easy-to-use struct.

			% We need to transpose state matrix.
			x = x';
			% ODE and algebraic states:
			wt__p_r__m = x(1,:);
			wt__p_nr__m = x(2,:);
			wt__mu = x(3,:);
			wt__r = x(4,:);

			% Assigment states:
			wt__s = p.s;
			wt__m_h = p.m_h;
			wt__p_r__mu = wt__mu;
			wt__p_r__r = wt__r;
			wt__p_r__m_h = wt__m_h;
			wt__p_r__E_m = 3.459;
			wt__p_r__r_t = wt__p_r__m./p.wt__p_r__weigth;
			wt__p_nr__mu = wt__mu;
			wt__p_nr__r = wt__r;
			wt__p_nr__m_h = wt__m_h;
			wt__p_nr__E_m = 6.3492;
			wt__nu = p.wt__nu_max.*wt__s./(wt__s + p.wt__K_s);
			wt__m_p = wt__p_r__m + wt__p_nr__m;
			wt__p_r__nu = wt__nu;
			wt__p_r__K_C0 = p.wt__p_r__k_b./(p.wt__p_r__k_u + wt__p_r__nu./p.wt__p_r__l_e);
			wt__p_r__J = wt__p_r__E_m.*p.wt__p_r__omega./(p.wt__p_r__d_m./wt__p_r__K_C0 + wt__p_r__mu.*wt__p_r__r);
			wt__p_nr__nu = wt__nu;
			wt__p_nr__K_C0 = p.wt__p_nr__k_b./(p.wt__p_nr__k_u + wt__p_nr__nu./p.wt__p_nr__l_e);
			wt__p_nr__J = wt__p_nr__E_m.*p.wt__p_nr__omega./(p.wt__p_nr__d_m./wt__p_nr__K_C0 + wt__p_nr__mu.*wt__p_nr__r);
			wt__J_sum = p.wt__p_r__N.*wt__p_r__J + p.wt__p_nr__N.*wt__p_nr__J;
			wt__J_host_sum = p.wt__p_r__N.*wt__p_r__J + p.wt__p_nr__N.*wt__p_nr__J;
			wt__J_sum_E = p.wt__p_r__N.*(1 + 1./wt__p_r__E_m).*wt__p_r__J + p.wt__p_nr__N.*(1 + 1./wt__p_nr__E_m).*wt__p_nr__J;
			wt__phi_b_t = wt__J_host_sum./(1 + wt__J_sum_E);
			wt__p_r__J_host_sum = wt__J_host_sum;
			wt__p_nr__J_host_sum = wt__J_host_sum;

			% Save simulation time.
			out.t = t;

			% Vector for extending single-value states and parameters.
			ones_t = ones(size(t'));


			% Save states.
			out.wt__s = wt__s.*ones_t;
			out.wt__m_h = wt__m_h.*ones_t;
			out.wt__p_r__nu = wt__p_r__nu.*ones_t;
			out.wt__p_r__mu = wt__p_r__mu.*ones_t;
			out.wt__p_r__r = wt__p_r__r.*ones_t;
			out.wt__p_r__m_h = wt__p_r__m_h.*ones_t;
			out.wt__p_r__J_host_sum = wt__p_r__J_host_sum.*ones_t;
			out.wt__p_r__K_C0 = wt__p_r__K_C0.*ones_t;
			out.wt__p_r__E_m = wt__p_r__E_m.*ones_t;
			out.wt__p_r__J = wt__p_r__J.*ones_t;
			out.wt__p_r__m = wt__p_r__m.*ones_t;
			out.wt__p_r__r_t = wt__p_r__r_t.*ones_t;
			out.wt__p_nr__nu = wt__p_nr__nu.*ones_t;
			out.wt__p_nr__mu = wt__p_nr__mu.*ones_t;
			out.wt__p_nr__r = wt__p_nr__r.*ones_t;
			out.wt__p_nr__m_h = wt__p_nr__m_h.*ones_t;
			out.wt__p_nr__J_host_sum = wt__p_nr__J_host_sum.*ones_t;
			out.wt__p_nr__K_C0 = wt__p_nr__K_C0.*ones_t;
			out.wt__p_nr__E_m = wt__p_nr__E_m.*ones_t;
			out.wt__p_nr__J = wt__p_nr__J.*ones_t;
			out.wt__p_nr__m = wt__p_nr__m.*ones_t;
			out.wt__nu = wt__nu.*ones_t;
			out.wt__mu = wt__mu.*ones_t;
			out.wt__m_p = wt__m_p.*ones_t;
			out.wt__J_sum = wt__J_sum.*ones_t;
			out.wt__J_host_sum = wt__J_host_sum.*ones_t;
			out.wt__J_sum_E = wt__J_sum_E.*ones_t;
			out.wt__phi_b_t = wt__phi_b_t.*ones_t;
			out.wt__r = wt__r.*ones_t;

			% Save parameters.
			out.wt__p_r__N = p.wt__p_r__N.*ones_t;
			out.wt__p_r__omega = p.wt__p_r__omega.*ones_t;
			out.wt__p_r__d_m = p.wt__p_r__d_m.*ones_t;
			out.wt__p_r__k_b = p.wt__p_r__k_b.*ones_t;
			out.wt__p_r__k_u = p.wt__p_r__k_u.*ones_t;
			out.wt__p_r__l_p = p.wt__p_r__l_p.*ones_t;
			out.wt__p_r__l_e = p.wt__p_r__l_e.*ones_t;
			out.wt__p_r__weigth = p.wt__p_r__weigth.*ones_t;
			out.wt__p_nr__N = p.wt__p_nr__N.*ones_t;
			out.wt__p_nr__omega = p.wt__p_nr__omega.*ones_t;
			out.wt__p_nr__d_m = p.wt__p_nr__d_m.*ones_t;
			out.wt__p_nr__k_b = p.wt__p_nr__k_b.*ones_t;
			out.wt__p_nr__k_u = p.wt__p_nr__k_u.*ones_t;
			out.wt__p_nr__l_p = p.wt__p_nr__l_p.*ones_t;
			out.wt__p_nr__l_e = p.wt__p_nr__l_e.*ones_t;
			out.wt__K_s = p.wt__K_s.*ones_t;
			out.wt__nu_max = p.wt__nu_max.*ones_t;
			out.wt__m_aa = p.wt__m_aa.*ones_t;
			out.wt__phi_t = p.wt__phi_t.*ones_t;
			out.s = p.s.*ones_t;
			out.m_h = p.m_h.*ones_t;

		end
		function plot(~,out)
			%% Plot simulation result.
			subplot(6,5,1);
			plot(out.t, out.wt__s);
			title("wt__s");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,2);
			plot(out.t, out.wt__m_h);
			title("wt__m_h");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,3);
			plot(out.t, out.wt__p_r__nu);
			title("wt__p_r__nu");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,4);
			plot(out.t, out.wt__p_r__mu);
			title("wt__p_r__mu");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,5);
			plot(out.t, out.wt__p_r__r);
			title("wt__p_r__r");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,6);
			plot(out.t, out.wt__p_r__m_h);
			title("wt__p_r__m_h");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,7);
			plot(out.t, out.wt__p_r__J_host_sum);
			title("wt__p_r__J_host_sum");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,8);
			plot(out.t, out.wt__p_r__K_C0);
			title("wt__p_r__K_C0");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,9);
			plot(out.t, out.wt__p_r__E_m);
			title("wt__p_r__E_m");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,10);
			plot(out.t, out.wt__p_r__J);
			title("wt__p_r__J");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,11);
			plot(out.t, out.wt__p_r__m);
			title("wt__p_r__m");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,12);
			plot(out.t, out.wt__p_r__r_t);
			title("wt__p_r__r_t");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,13);
			plot(out.t, out.wt__p_nr__nu);
			title("wt__p_nr__nu");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,14);
			plot(out.t, out.wt__p_nr__mu);
			title("wt__p_nr__mu");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,15);
			plot(out.t, out.wt__p_nr__r);
			title("wt__p_nr__r");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,16);
			plot(out.t, out.wt__p_nr__m_h);
			title("wt__p_nr__m_h");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,17);
			plot(out.t, out.wt__p_nr__J_host_sum);
			title("wt__p_nr__J_host_sum");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,18);
			plot(out.t, out.wt__p_nr__K_C0);
			title("wt__p_nr__K_C0");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,19);
			plot(out.t, out.wt__p_nr__E_m);
			title("wt__p_nr__E_m");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,20);
			plot(out.t, out.wt__p_nr__J);
			title("wt__p_nr__J");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,21);
			plot(out.t, out.wt__p_nr__m);
			title("wt__p_nr__m");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,22);
			plot(out.t, out.wt__nu);
			title("wt__nu");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,23);
			plot(out.t, out.wt__mu);
			title("wt__mu");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,24);
			plot(out.t, out.wt__m_p);
			title("wt__m_p");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,25);
			plot(out.t, out.wt__J_sum);
			title("wt__J_sum");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,26);
			plot(out.t, out.wt__J_host_sum);
			title("wt__J_host_sum");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,27);
			plot(out.t, out.wt__J_sum_E);
			title("wt__J_sum_E");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,28);
			plot(out.t, out.wt__phi_b_t);
			title("wt__phi_b_t");
			ylim([0, +inf]);
			grid on;

			subplot(6,5,29);
			plot(out.t, out.wt__r);
			title("wt__r");
			ylim([0, +inf]);
			grid on;

		end
	end
end
