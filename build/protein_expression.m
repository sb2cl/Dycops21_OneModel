classdef protein_expression
	% This file was automatically generated by OneModel.
	% Any changes you make to it will be overwritten the next time
	% the file is generated.

	properties
		p      % Default model parameters.
		x0     % Default initial conditions.
		M      % Mass matrix for DAE systems.
		opts   % Simulation options.
	end

	methods
		function obj = protein_expression()
			%% Constructor of protein_expression.
			obj.p    = obj.default_parameters();
			obj.x0   = obj.initial_conditions();
			obj.M    = obj.mass_matrix();
			obj.opts = obj.simulation_options();
		end

		function p = default_parameters(~)
			%% Default parameters value.
			p = [];
			p.GFP__omega = 1.0;
			p.GFP__phi = 1.0;
			p.GFP__k = 1.0;
			p.GFP__d = 1.0;
		end

		function x0 = initial_conditions(~)
			%% Default initial conditions.
			x0 = [
				0.0 % GFP__mRNA
				0.0 % GFP__protein
			];
		end

		function M = mass_matrix(~)
			%% Mass matrix for DAE systems.
			M = [
				1 0 
				0 1 
			];
		end

		function opts = simulation_options(~)
			%% Default simulation options.
			opts.t_end = 10.0;
			opts.t_init = 0.0;
		end

		function dx = ode(~,t,x,p)
			%% Evaluate the ODE.
			%
			% Args:
			%	 t Current time in the simulation.
			%	 x Array with the state value.
			%	 p Struct with the parameters.
			%
			% Return:
			%	 dx Array with the ODE.

			% ODE and algebraic states:
			GFP__mRNA = x(1,:);
			GFP__protein = x(2,:);

			% Assigment states:

			% der(GFP__mRNA)
			dx(1,1) =  + (p.GFP__omega) - (p.GFP__phi.*GFP__mRNA) + (p.GFP__k.*GFP__mRNA) - (p.GFP__k.*GFP__mRNA);

			% der(GFP__protein)
			dx(2,1) =  + (p.GFP__k.*GFP__mRNA) - (p.GFP__d.*GFP__protein);

		end
		function out = simout2struct(~,t,x,p)
			%% Convert the simulation output into an easy-to-use struct.

			% We need to transpose state matrix.
			x = x';
			% ODE and algebraic states:
			GFP__mRNA = x(1,:);
			GFP__protein = x(2,:);

			% Assigment states:

			% Save simulation time.
			out.t = t;

			% Vector for extending single-value states and parameters.
			ones_t = ones(size(t'));


			% Save states.
			out.GFP__mRNA = GFP__mRNA.*ones_t;
			out.GFP__protein = GFP__protein.*ones_t;

			% Save parameters.
			out.GFP__omega = p.GFP__omega.*ones_t;
			out.GFP__phi = p.GFP__phi.*ones_t;
			out.GFP__k = p.GFP__k.*ones_t;
			out.GFP__d = p.GFP__d.*ones_t;

		end
		function plot(~,out)
			%% Plot simulation result.
			figure('Name','GFP');
			subplot(2,1,1);
			plot(out.t, out.GFP__mRNA);
			title("GFP__mRNA");
			ylim([0, +inf]);
			grid on;

			subplot(2,1,2);
			plot(out.t, out.GFP__protein);
			title("GFP__protein");
			ylim([0, +inf]);
			grid on;

		end
	end
end
